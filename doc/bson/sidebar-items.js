initSidebarItems({"enum":[["Bson","Possible BSON value types."],["UuidRepresentation","Enum of the possible representations to use when converting between [`Uuid`] and [`Binary`]. This enum is necessary because the different drivers used to have different ways of encoding UUIDs, with the BSON subtype: 0x03 (UUID old). If a UUID has been serialized with a particular representation, it MUST be deserialized with the same representation."]],"fn":[["from_bson","Deserialize a `T` from the provided [`Bson`] value."],["from_bson_with_options","Deserialize a `T` from the provided [`Bson`] value, configuring the underlying deserializer with the provided options."],["from_document","Deserialize a `T` from the provided [`Document`]."],["from_document_with_options","Deserialize a `T` from the provided [`Document`], configuring the underlying deserializer with the provided options."],["from_reader","Deserialize an instance of type `T` from an I/O stream of BSON."],["from_reader_utf8_lossy","Deserialize an instance of type `T` from an I/O stream of BSON, replacing any invalid UTF-8 sequences with the Unicode replacement character."],["from_slice","Deserialize an instance of type `T` from a slice of BSON bytes."],["from_slice_utf8_lossy","Deserialize an instance of type `T` from a slice of BSON bytes, replacing any invalid UTF-8 sequences with the Unicode replacement character."],["to_bson","Encode a `T` Serializable into a BSON `Value`."],["to_bson_with_options","Encode a `T` into a `Bson` value, configuring the underlying serializer with the provided options."],["to_document","Encode a `T` Serializable into a BSON `Document`."],["to_document_with_options","Encode a `T` into a [`Document`], configuring the underlying serializer with the provided options."],["to_vec","Serialize the given `T` as a BSON byte vector."]],"macro":[["bson","Construct a bson::BSON value from a literal."],["doc","Construct a bson::Document value."]],"mod":[["datetime",""],["de","Deserializer"],["decimal128","BSON Decimal128 data type representation"],["document","A BSON document represented as an associative HashMap with insertion ordering."],["extjson","Deserialization and serialization of MongoDB Extended JSON v2"],["oid","ObjectId"],["ser","Serializer"],["serde_helpers","Collection of helper functions for serializing to and deserializing from BSON using Serde"],["spec","Constants derived from the BSON Specification Version 1.1."],["uuid","UUID support for BSON."]],"struct":[["Binary","Represents a BSON binary value."],["DateTime","Struct representing a BSON datetime. Note: BSON datetimes have millisecond precision."],["DbPointer","Represents a DBPointer. (Deprecated)"],["Decimal128","Struct representing a BSON Decimal128 type."],["Deserializer","Serde Deserializer"],["DeserializerOptions","Options used to configure a [`Deserializer`]. These can also be passed into [`crate::from_bson_with_options`] and [`crate::from_document_with_options`]."],["Document","A BSON document represented as an associative HashMap with insertion ordering."],["JavaScriptCodeWithScope","Represents a BSON code with scope value."],["Regex","Represents a BSON regular expression value."],["Serializer","Serde Serializer"],["SerializerOptions","Options used to configure a [`Serializer`]."],["Timestamp","Represents a BSON timestamp value."],["Uuid","A struct modeling a BSON UUID value (i.e. a Binary value with subtype 4)."]],"type":[["Array","Alias for `Vec<Bson>`."]]});